variables:
- group: SampleVariable
# trigger:
# - master
pool:
   vmImage: 'windows-2019'      
jobs:
- job: Angular
  steps:
  - task: DeleteFiles@1
    displayName: 'Delete JUnit files'
    inputs:
      SourceFolder: src/angular7/junit
      Contents: 'TEST*.xml'
  
  - task: Npm@1
    displayName: 'npm install'
    inputs:
      command: install
      workingDir: src/angular7
  
  - task: Npm@1
    displayName: 'Build Angular'
    inputs:
      command: custom
      customCommand: run build -- --prod
      workingDir: src/angular7
  
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'angular'
      targetPath: 'src/angular7/dist'
  
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: 'src/angular7/dist'
      ArtifactName: angular2
  
  - task: Npm@1
    displayName: 'Test Angular'
    inputs:
      command: custom
      customCommand: run test -- --watch=false --code-coverage
      workingDir: src/angular7
  
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage Angular results'
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: 'src/angular7/coverage/cobertura-coverage.xml'
      reportDirectory: src/angular7/coverage
      failIfCoverageEmpty: true
  
  - task: PublishTestResults@2
    displayName: 'Publish Angular test results'
    condition: succeededOrFailed()
    inputs:
      searchFolder: $(System.DefaultWorkingDirectory)/src/angular7/junit
      testRunTitle: Angular
      testResultsFormat: JUnit
      testResultsFiles: "**/TESTS*.xml"
  
  - task: Npm@1
    displayName: 'Lint Angular'
    inputs:
      command: custom
      customCommand: run lint --  --format=stylish
      workingDir: src/angular7
  # - task: CopyFiles@2
  #   inputs:
  #     SourceFolder: 'src/angular7/dist'
  #     Contents: '**/*'
  #     TargetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/src/angular7/dist'
      Contents: '**/*'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/dist'
  # - task: ShellScript@2
  #   inputs:
  #     scriptPath:
  #     args: 'll' # Optional
  #     #disableAutoCwd: false # Optional
  #     #cwd: '' # Optional
  #     #failOnStandardError: false
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/dist'
      ArtifactName: 'drop'
      publishLocation: 'Container'
  - task: AzureFileCopy@4
    inputs:
      SourcePath: '$(Build.ArtifactStagingDirectory)/dist'
      azureSubscription: 'AzureConnection'
      Destination: 'AzureBlob'
      storage: 'e2nprdhub01sample'
      ContainerName: 'web'
      
  # - task: DownloadBuildArtifacts@0
  #   inputs:
  #     buildType: 'current'
  #     downloadType: 'single'
  #     downloadPath: '$(Build.ArtifactStagingDirectory)/drop'
  #     artifactName: 'drop'
  
  # - task: Npm@1
  #   displayName: 'E2E Test Angular'
  #   inputs:
  #     command: custom
  #     customCommand: run e2e
  #     workingDir: src/angular7
  
  # - task: PublishTestResults@2
  #   displayName: 'Publish Angular E2E test results'
  #   condition: succeededOrFailed()
  #   inputs:
  #     searchFolder: $(System.DefaultWorkingDirectory)/src/angular7/e2e/junit
  #     testRunTitle: Angular_E2E
  #     testResultsFormat: JUnit
#   #     testResultsFiles: "**/junit*.xml"
#   - task: AzureCLI@2
#     displayName: 'Azure CLI'
#     inputs:
#       azureSubscription: 'GTS - Cloud'
#       scriptType: ps
#       scriptLocation: inlineScript
#       inlineScript: |
#       az storage blob upload-batch --account-name $(DevStrgName)$ --account-key $(DevStrgKey) --destination '$web' --source ./src/angular7/dist
# #      az cdn endpoint purge -g rg_NPRD-DHUB -n e2nprdhubapp --profile-name e2nprdhubcdn01 --content-paths '/*'
# - job: Release
#   dependsOn: 'Angular'
#   steps:
#   - task: AzureCLI@2
#     displayName: 'Azure CLI'
#     inputs:
#       azureSubscription: 'AzureConnection'
#       scriptType: 'ps'
#       scriptLocation: 'inlineScript'
#       inlineScript: 'az storage blob upload-batch --account-name $(DevStrgName) --account-key $(DevStrgKey) --destination ''$web'' --source $(Build.ArtifactStagingDirectory)/drop' 
      

